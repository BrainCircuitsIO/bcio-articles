{
  "hash": "720d47e1ef95abc3e8cfef5f05fb760f",
  "result": {
    "markdown": "---\ntitle: Large-Scale Connectome Analytics in the Cloud\nauthor: Stephan Gerhard\ndate: '2023-10-09'\nimage: image.jpg\ncategories:\n  - analysis\ndraft: false\nexecute:\n  enabled: true\n---\n\n## Goals\n\nLearn how to access and analyze large-scale connectome datasets hosted on BrainCircuits.io remotely in Python using [DuckDB](https://duckdb.org/).\n\n\n## Requirements\n\nWe need to first install DuckDB into our Python environment\n\n```python\npip install duckdb\n```\n\n## Datasets\n\nEvery dataset on BrainCircuits.io has a unique string identifier. You can find the identifier in the [Dataset Description](https://braincircuits.io/dataset_description/) overview or by inspecting the folders of the [source data](https://api.braincircuits.io/data/) directly.\n\nFor the following tutorial we are going to use the public fruitfly FlyWire dataset with identifier `fruitfly_fafb_flywire_public`. Please make sure to cite the appropriate publications when using this data. You can find relevant links in the `About` widget of the dataset.\n\n## Data Model Overview\n\nThe static connectome dataset consists of a number of Parquet files. You can see all the files for the FlyWire dataset here: [https://api.braincircuits.io/data/fruitfly_fafb_flywire_public/](https://api.braincircuits.io/data/fruitfly_fafb_flywire_public/)\n\nIn each dataset folder, you find a `DATASET.txt` file which shows for all files the contained columns and data type of the column together with the total number of records available.\n\nThe following table describes briefly the content of each type of file:\n\n| Filename  | Content  |\n|--------|--------|\n| `neurons.parquet`  | Each neuron (or segment) in the dataset with an arbitrary set of columns with more information about individual neurons   |\n| `segment_link.parquet`   | An aggregate edge table that lists the synaptic counts between source and target segments. Additional columns with some statistics about the connection (e.g. `avg_scores` is the average score value of each individual synaptic link score)    |\n| `segment_size.parquet`   | Size information about a segment such as number of containing supervoxels or total number of voxels |\n| `segment_nucleus.parquet`   | For each segment a count of associated number of nuclei. Should only be one in an ideal world with perfect segmentations. |\n| `segment_neurotransmitter.parquet`   | Summary of most likely neurotransmitter per segment based on filtering of presynaptic locations and their individual neurontransmitter prediction  |\n| `segment_link_pre.parquet`   | Number of presynaptic locations and downstream partner segments for each segment |\n| `segment_link_post.parquet`   | Number of postsynaptic locations and upstream partner segments for each segment |\n| `link.parquet/*.parquet` | Same information as in thet `synapse_link.parquet` file but split into individual parquet files for faster access |\n| `neurotransmitter.parquet/*.parquet` | The neurotransmitter predictions for each individual synaptic link |\n| `nucleus.parquet/*.parquet` | The location and size of each individual predicted nucleus |\n| `synapse_link.parquet`   | Each individual predicted synaptic link between a presynaptic and a postsynaptic location with associated scores. |\n| `skeleton/l2skeletons/skeletons.parquet` | Summary statistics about each exported `l2skeleton` in the dataset.  |\n| `skeleton/l2skeletons/skeleton_nodes.parquet` | Individual skeleton nodes for each segment.  |\n\n## Query the Data\n\nUsing DuckDB, those files can be used remotely as tables in an SQL query. If you want to go into more depth, you can read the [DuckDB documentation](https://duckdb.org/docs). Here, we demonstrate a few common queries to get started. In order to improve readability of the query, we store part of the URL in a `baseurl` variable\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport duckdb\nbaseurl = 'https://api.braincircuits.io/data/fruitfly_fafb_flywire_public'\n```\n:::\n\n\nFirst, we need a DuckDB connection object:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ncon = duckdb.connect()\n```\n:::\n\n\nWe can query neurons by a search string easily. If we want to retrieve all neurons which contain `BPN` string(case-insensitive) in their label column, we use the following query:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/neurons.parquet' \n               WHERE label ILIKE '%BPN%'\n               LIMIT 5\"\"\").df()\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>segment_id</th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n      <th>soma_x</th>\n      <th>soma_y</th>\n      <th>soma_z</th>\n      <th>nucleus_id</th>\n      <th>sv_id</th>\n      <th>flow</th>\n      <th>...</th>\n      <th>morphology_group</th>\n      <th>top_nt_conf</th>\n      <th>cell_type</th>\n      <th>label</th>\n      <th>size_um3</th>\n      <th>nr_pre</th>\n      <th>nr_downstream_partner</th>\n      <th>nr_post</th>\n      <th>nr_upstream_partner</th>\n      <th>nucleus_nr</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>720575940628278654</td>\n      <td>122736</td>\n      <td>35863</td>\n      <td>4010</td>\n      <td>127752</td>\n      <td>24256</td>\n      <td>3265</td>\n      <td>4373018</td>\n      <td>79026093046706888</td>\n      <td>intrinsic</td>\n      <td>...</td>\n      <td>SMPpm1_2</td>\n      <td>0.844157</td>\n      <td></td>\n      <td>orphan-BPN-output</td>\n      <td>195.360001</td>\n      <td>1812</td>\n      <td>958</td>\n      <td>544</td>\n      <td>205</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>720575940630006267</td>\n      <td>122528</td>\n      <td>36529</td>\n      <td>4022</td>\n      <td>122384</td>\n      <td>28984</td>\n      <td>3898</td>\n      <td>3574415</td>\n      <td>79026161766195332</td>\n      <td>intrinsic</td>\n      <td>...</td>\n      <td>SMPpm1_4</td>\n      <td>0.870921</td>\n      <td></td>\n      <td>BPN-like neuron</td>\n      <td>298.239990</td>\n      <td>2913</td>\n      <td>1261</td>\n      <td>1272</td>\n      <td>385</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>720575940627098249</td>\n      <td>140000</td>\n      <td>23144</td>\n      <td>3126</td>\n      <td>140000</td>\n      <td>23144</td>\n      <td>3126</td>\n      <td>5577486</td>\n      <td>80221468276838352</td>\n      <td>intrinsic</td>\n      <td>...</td>\n      <td>SMPp&amp;v1_posterior_1</td>\n      <td>0.795091</td>\n      <td>SMPp&amp;v1A_H01</td>\n      <td>orphan-BPN-output</td>\n      <td>1250.310059</td>\n      <td>10747</td>\n      <td>4063</td>\n      <td>6845</td>\n      <td>1085</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>720575940618558365</td>\n      <td>162592</td>\n      <td>77144</td>\n      <td>1981</td>\n      <td>162592</td>\n      <td>77144</td>\n      <td>1981</td>\n      <td>6912408</td>\n      <td>81773222580344887</td>\n      <td>intrinsic</td>\n      <td>...</td>\n      <td></td>\n      <td>0.845792</td>\n      <td></td>\n      <td>orphan-BPN-output</td>\n      <td>1822.030029</td>\n      <td>20429</td>\n      <td>7895</td>\n      <td>13329</td>\n      <td>2115</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>720575940628859751</td>\n      <td>144022</td>\n      <td>38835</td>\n      <td>3763</td>\n      <td>139624</td>\n      <td>28968</td>\n      <td>3616</td>\n      <td>4944515</td>\n      <td>80504042832559736</td>\n      <td>intrinsic</td>\n      <td>...</td>\n      <td>SMPpm1_4</td>\n      <td>0.842429</td>\n      <td></td>\n      <td>Type 1 BPN (Bolt Protocerebral Neuron),(Bidaye...</td>\n      <td>236.750000</td>\n      <td>2585</td>\n      <td>1104</td>\n      <td>1348</td>\n      <td>350</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 30 columns</p>\n</div>\n```\n:::\n:::\n\n\nLet's retrieve the first 5 neurons that have more than 1000 downstream partners and sort by the number of downstream partners. We can use the following query and retrieve the results directly in a Pandas dataframe:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/neurons.parquet' \n               WHERE nr_downstream_partner > 1000 \n               ORDER BY nr_downstream_partner DESC\n               LIMIT 5\"\"\").df()\ndf\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"bf36552ecb0a4e8bb8cbd1458a332845\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>segment_id</th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n      <th>soma_x</th>\n      <th>soma_y</th>\n      <th>soma_z</th>\n      <th>nucleus_id</th>\n      <th>sv_id</th>\n      <th>flow</th>\n      <th>...</th>\n      <th>morphology_group</th>\n      <th>top_nt_conf</th>\n      <th>cell_type</th>\n      <th>label</th>\n      <th>size_um3</th>\n      <th>nr_pre</th>\n      <th>nr_downstream_partner</th>\n      <th>nr_post</th>\n      <th>nr_upstream_partner</th>\n      <th>nucleus_nr</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>720575940621280688</td>\n      <td>156482</td>\n      <td>42275</td>\n      <td>3896</td>\n      <td>179416</td>\n      <td>51040</td>\n      <td>3014</td>\n      <td>7396453</td>\n      <td>81348673921237569</td>\n      <td>intrinsic</td>\n      <td>...</td>\n      <td></td>\n      <td>0.771267</td>\n      <td></td>\n      <td>Mushroom Body</td>\n      <td>11388.240234</td>\n      <td>146255</td>\n      <td>51620</td>\n      <td>113071</td>\n      <td>7052</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>720575940615970783</td>\n      <td>158906</td>\n      <td>64213</td>\n      <td>4347</td>\n      <td>127904</td>\n      <td>49928</td>\n      <td>1289</td>\n      <td>4492836</td>\n      <td>81561292049294153</td>\n      <td>intrinsic</td>\n      <td>...</td>\n      <td></td>\n      <td>0.655521</td>\n      <td></td>\n      <td>CT1</td>\n      <td>16315.629883</td>\n      <td>247006</td>\n      <td>49134</td>\n      <td>144276</td>\n      <td>17505</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>720575940629174889</td>\n      <td>107560</td>\n      <td>34947</td>\n      <td>4823</td>\n      <td>83352</td>\n      <td>47240</td>\n      <td>3701</td>\n      <td>1813248</td>\n      <td>78040862042737270</td>\n      <td>intrinsic</td>\n      <td>...</td>\n      <td></td>\n      <td>0.795262</td>\n      <td></td>\n      <td>APL-RHS</td>\n      <td>11757.730469</td>\n      <td>163407</td>\n      <td>48184</td>\n      <td>125189</td>\n      <td>6953</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>720575940621675174</td>\n      <td>133999</td>\n      <td>56333</td>\n      <td>1847</td>\n      <td>134280</td>\n      <td>51872</td>\n      <td>1179</td>\n      <td>5058804</td>\n      <td>79801523353597754</td>\n      <td>intrinsic</td>\n      <td>...</td>\n      <td></td>\n      <td>0.621499</td>\n      <td></td>\n      <td>CT1</td>\n      <td>15729.919922</td>\n      <td>246711</td>\n      <td>47962</td>\n      <td>144967</td>\n      <td>18119</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>720575940626637002</td>\n      <td>121547</td>\n      <td>58007</td>\n      <td>2243</td>\n      <td>144464</td>\n      <td>50760</td>\n      <td>762</td>\n      <td>5741632</td>\n      <td>78957235929387973</td>\n      <td>intrinsic</td>\n      <td>...</td>\n      <td></td>\n      <td>0.859750</td>\n      <td></td>\n      <td>None</td>\n      <td>6876.879883</td>\n      <td>139542</td>\n      <td>42196</td>\n      <td>67281</td>\n      <td>10190</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 30 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe see that segment `720575940621280688` has 51620 downstream partners.\n\nLet's store this segment id as variable\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nsegment_id = 720575940621280688\n```\n:::\n\n\nLet's get all the downstream partners of this segment:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/segment_link.parquet' \n               WHERE src = {segment_id}\n               ORDER BY dst DESC\n               LIMIT 5\"\"\").df()\ndf\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"f83452b97dbf4fea87243b3fa41c09cc\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>src</th>\n      <th>dst</th>\n      <th>count</th>\n      <th>min_scores</th>\n      <th>max_scores</th>\n      <th>avg_scores</th>\n      <th>min_cleft_scores</th>\n      <th>max_cleft_scores</th>\n      <th>avg_cleft_scores</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>720575940621280688</td>\n      <td>720575940660053121</td>\n      <td>2</td>\n      <td>109.382713</td>\n      <td>190.875397</td>\n      <td>150</td>\n      <td>141</td>\n      <td>152</td>\n      <td>146</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>720575940621280688</td>\n      <td>720575940660047489</td>\n      <td>43</td>\n      <td>7.637001</td>\n      <td>742.377136</td>\n      <td>192</td>\n      <td>1</td>\n      <td>178</td>\n      <td>114</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>720575940621280688</td>\n      <td>720575940659940225</td>\n      <td>41</td>\n      <td>5.718618</td>\n      <td>443.282257</td>\n      <td>172</td>\n      <td>0</td>\n      <td>168</td>\n      <td>120</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>720575940621280688</td>\n      <td>720575940659850113</td>\n      <td>23</td>\n      <td>9.563767</td>\n      <td>700.225708</td>\n      <td>174</td>\n      <td>0</td>\n      <td>168</td>\n      <td>104</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>720575940621280688</td>\n      <td>720575940659765121</td>\n      <td>31</td>\n      <td>9.567139</td>\n      <td>1110.103516</td>\n      <td>161</td>\n      <td>9</td>\n      <td>173</td>\n      <td>129</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd we get the list of all downstream segments from the dataframe:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndownstream_segments = df['dst'].tolist()\nprint(downstream_segments[:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[720575940660053121, 720575940660047489, 720575940659940225, 720575940659850113, 720575940659765121]\n```\n:::\n:::\n\n\nLet's get the L2 skeleton of this segment\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/skeleton/l2skeletons/skeleton_nodes.parquet' \n               WHERE segment_id = {segment_id}\"\"\").df()\ndf\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"7bdd217b1d7249789ca062cccce38760\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>segment_id</th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n      <th>node_id</th>\n      <th>parent</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>720575940621280688</td>\n      <td>506832</td>\n      <td>182256</td>\n      <td>49640</td>\n      <td>0</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>720575940621280688</td>\n      <td>507232</td>\n      <td>181232</td>\n      <td>52400</td>\n      <td>1</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>720575940621280688</td>\n      <td>511488</td>\n      <td>155344</td>\n      <td>87240</td>\n      <td>2</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>720575940621280688</td>\n      <td>510192</td>\n      <td>173536</td>\n      <td>60120</td>\n      <td>3</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>720575940621280688</td>\n      <td>508864</td>\n      <td>175056</td>\n      <td>59200</td>\n      <td>4</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>11343</th>\n      <td>720575940621280688</td>\n      <td>720592</td>\n      <td>199120</td>\n      <td>123600</td>\n      <td>11343</td>\n      <td>11342</td>\n    </tr>\n    <tr>\n      <th>11344</th>\n      <td>720575940621280688</td>\n      <td>721520</td>\n      <td>201552</td>\n      <td>120360</td>\n      <td>11344</td>\n      <td>11346</td>\n    </tr>\n    <tr>\n      <th>11345</th>\n      <td>720575940621280688</td>\n      <td>724288</td>\n      <td>202160</td>\n      <td>123520</td>\n      <td>11345</td>\n      <td>11344</td>\n    </tr>\n    <tr>\n      <th>11346</th>\n      <td>720575940621280688</td>\n      <td>724352</td>\n      <td>205840</td>\n      <td>120680</td>\n      <td>11346</td>\n      <td>11347</td>\n    </tr>\n    <tr>\n      <th>11347</th>\n      <td>720575940621280688</td>\n      <td>720944</td>\n      <td>205328</td>\n      <td>125480</td>\n      <td>11347</td>\n      <td>11340</td>\n    </tr>\n  </tbody>\n</table>\n<p>11348 rows Ã— 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe notice that this query is very slow. One option to speed things up is to download the entire `skeleton_nodes.parquet` file (180MB) and run the query locally:\n\n```python\n!wget -O /tmp/skeleton_nodes.parquet \\\n    https://api.braincircuits.io/data/fruitfly_fafb_flywire_public/skeleton/l2skeletons/skeleton_nodes.parquet \n```\n\nThe same query now takes only a fraction of a second.\n\n```python\ndf = con.query(f\"\"\"SELECT * \n               FROM '/tmp/skeleton_nodes.parquet' \n               WHERE segment_id = {segment_id}\"\"\").df()\n```\n\nWe can now also retrieve the presynaptic locations for this segment with the following query:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/synapse_link.parquet' \n               WHERE pre_segment_id = {segment_id}\n               LIMIT 5\"\"\").df()\ndf\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"6176bb781466498cb8470f0d588b4755\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>pre_x</th>\n      <th>pre_y</th>\n      <th>pre_z</th>\n      <th>post_x</th>\n      <th>post_y</th>\n      <th>post_z</th>\n      <th>scores</th>\n      <th>cleft_scores</th>\n      <th>cleft_id</th>\n      <th>pre_segment_id</th>\n      <th>post_segment_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>21210</td>\n      <td>135698</td>\n      <td>41219</td>\n      <td>1850</td>\n      <td>135665</td>\n      <td>41212</td>\n      <td>1849</td>\n      <td>170.457611</td>\n      <td>141</td>\n      <td>9915144</td>\n      <td>720575940621280688</td>\n      <td>720575940507977460</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>21211</td>\n      <td>135709</td>\n      <td>41240</td>\n      <td>1849</td>\n      <td>135680</td>\n      <td>41243</td>\n      <td>1849</td>\n      <td>326.895081</td>\n      <td>147</td>\n      <td>9915144</td>\n      <td>720575940621280688</td>\n      <td>720575940507981812</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21212</td>\n      <td>135719</td>\n      <td>41259</td>\n      <td>1848</td>\n      <td>135723</td>\n      <td>41279</td>\n      <td>1849</td>\n      <td>298.207092</td>\n      <td>100</td>\n      <td>0</td>\n      <td>720575940621280688</td>\n      <td>720575940507984372</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>21219</td>\n      <td>135709</td>\n      <td>41226</td>\n      <td>1852</td>\n      <td>135683</td>\n      <td>41234</td>\n      <td>1852</td>\n      <td>127.513809</td>\n      <td>68</td>\n      <td>0</td>\n      <td>720575940621280688</td>\n      <td>720575940605817522</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>22149</td>\n      <td>137649</td>\n      <td>41189</td>\n      <td>1863</td>\n      <td>137652</td>\n      <td>41207</td>\n      <td>1862</td>\n      <td>487.758301</td>\n      <td>148</td>\n      <td>10150849</td>\n      <td>720575940621280688</td>\n      <td>720575940472242925</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOr the postsynaptic locations:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/synapse_link.parquet' \n               WHERE post_segment_id = {segment_id}\n               LIMIT 5\"\"\").df()\ndf\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"d0d696908a6e4473b96651c73e97fce9\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>pre_x</th>\n      <th>pre_y</th>\n      <th>pre_z</th>\n      <th>post_x</th>\n      <th>post_y</th>\n      <th>post_z</th>\n      <th>scores</th>\n      <th>cleft_scores</th>\n      <th>cleft_id</th>\n      <th>pre_segment_id</th>\n      <th>post_segment_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>21253</td>\n      <td>135822</td>\n      <td>41325</td>\n      <td>1862</td>\n      <td>135843</td>\n      <td>41297</td>\n      <td>1862</td>\n      <td>10.482904</td>\n      <td>0</td>\n      <td>0</td>\n      <td>720575940507992820</td>\n      <td>720575940621280688</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>21277</td>\n      <td>135924</td>\n      <td>41320</td>\n      <td>1873</td>\n      <td>135938</td>\n      <td>41299</td>\n      <td>1873</td>\n      <td>910.730591</td>\n      <td>142</td>\n      <td>9915241</td>\n      <td>720575940636560730</td>\n      <td>720575940621280688</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21284</td>\n      <td>135971</td>\n      <td>41583</td>\n      <td>1872</td>\n      <td>135968</td>\n      <td>41552</td>\n      <td>1872</td>\n      <td>286.582794</td>\n      <td>149</td>\n      <td>9915238</td>\n      <td>720575940649691513</td>\n      <td>720575940621280688</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>21297</td>\n      <td>135999</td>\n      <td>41502</td>\n      <td>1873</td>\n      <td>135986</td>\n      <td>41526</td>\n      <td>1873</td>\n      <td>117.003525</td>\n      <td>83</td>\n      <td>0</td>\n      <td>720575940636560730</td>\n      <td>720575940621280688</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>21344</td>\n      <td>136810</td>\n      <td>41444</td>\n      <td>1849</td>\n      <td>136790</td>\n      <td>41461</td>\n      <td>1849</td>\n      <td>45.242020</td>\n      <td>92</td>\n      <td>0</td>\n      <td>720575940629397079</td>\n      <td>720575940621280688</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"2c0e70b4cade4c6f93dbdef5607a7ce2\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":\"auto\"}},\"6176bb781466498cb8470f0d588b4755\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_2c0e70b4cade4c6f93dbdef5607a7ce2\",\"max\":100,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_df1a355cd5f7409893c5f2a2e0617cb3\",\"tabbable\":null,\"tooltip\":null,\"value\":100}},\"77a81df61fc743b19899b854a646360f\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":\"auto\"}},\"7bdd217b1d7249789ca062cccce38760\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_77a81df61fc743b19899b854a646360f\",\"max\":100,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_ac97054106d446938aa074ee7b43dd46\",\"tabbable\":null,\"tooltip\":null,\"value\":100}},\"899da04948e246a09417daea3943d38c\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":\"black\",\"description_width\":\"\"}},\"997a676e600144ee84176223bdc79d8b\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":\"auto\"}},\"ac97054106d446938aa074ee7b43dd46\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":\"black\",\"description_width\":\"\"}},\"b035f059dc7a4c98bbc3025975d38e85\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":\"black\",\"description_width\":\"\"}},\"bf36552ecb0a4e8bb8cbd1458a332845\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_fc6afedaa2bb4ce6a530d500edf7a914\",\"max\":100,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_b035f059dc7a4c98bbc3025975d38e85\",\"tabbable\":null,\"tooltip\":null,\"value\":100}},\"cb16eb636dc049e092732371b2d8e877\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":\"black\",\"description_width\":\"\"}},\"d0d696908a6e4473b96651c73e97fce9\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_997a676e600144ee84176223bdc79d8b\",\"max\":100,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_899da04948e246a09417daea3943d38c\",\"tabbable\":null,\"tooltip\":null,\"value\":100}},\"df1a355cd5f7409893c5f2a2e0617cb3\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":\"black\",\"description_width\":\"\"}},\"ef7cafa7c87a46efa11605ab7b8544be\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":\"auto\"}},\"f83452b97dbf4fea87243b3fa41c09cc\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_ef7cafa7c87a46efa11605ab7b8544be\",\"max\":100,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_cb16eb636dc049e092732371b2d8e877\",\"tabbable\":null,\"tooltip\":null,\"value\":100}},\"fc6afedaa2bb4ce6a530d500edf7a914\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":\"auto\"}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}