[
  {
    "objectID": "posts/connectome-cloud-analytics/index.html",
    "href": "posts/connectome-cloud-analytics/index.html",
    "title": "Large-Scale Connectome Analytics in the Cloud",
    "section": "",
    "text": "Learn how to access and analyze large-scale connectome datasets hosted on BrainCircuits.io remotely in Python using DuckDB."
  },
  {
    "objectID": "posts/connectome-cloud-analytics/index.html#goals",
    "href": "posts/connectome-cloud-analytics/index.html#goals",
    "title": "Large-Scale Connectome Analytics in the Cloud",
    "section": "",
    "text": "Learn how to access and analyze large-scale connectome datasets hosted on BrainCircuits.io remotely in Python using DuckDB."
  },
  {
    "objectID": "posts/connectome-cloud-analytics/index.html#requirements",
    "href": "posts/connectome-cloud-analytics/index.html#requirements",
    "title": "Large-Scale Connectome Analytics in the Cloud",
    "section": "Requirements",
    "text": "Requirements\nWe need to first install DuckDB into our Python environment\npip install duckdb"
  },
  {
    "objectID": "posts/connectome-cloud-analytics/index.html#datasets",
    "href": "posts/connectome-cloud-analytics/index.html#datasets",
    "title": "Large-Scale Connectome Analytics in the Cloud",
    "section": "Datasets",
    "text": "Datasets\nEvery dataset on BrainCircuits.io has a unique string identifier. You can find the identifier in the Dataset Description overview or by inspecting the folders of the source data directly.\nFor the following tutorial we are going to use the public fruitfly FlyWire dataset with identifier fruitfly_fafb_flywire_public. Please make sure to cite the appropriate publications when using this data. You can find relevant links in the About widget of the dataset."
  },
  {
    "objectID": "posts/connectome-cloud-analytics/index.html#data-model-overview",
    "href": "posts/connectome-cloud-analytics/index.html#data-model-overview",
    "title": "Large-Scale Connectome Analytics in the Cloud",
    "section": "Data Model Overview",
    "text": "Data Model Overview\nThe static connectome dataset consists of a number of Parquet files. You can see all the files for the FlyWire dataset here: https://api.braincircuits.io/data/fruitfly_fafb_flywire_public/\nIn each dataset folder, you find a DATASET.txt file which shows for all files the contained columns and data type of the column together with the total number of records available.\nThe following table describes briefly the content of each type of file:\n\n\n\n\n\n\n\nFilename\nContent\n\n\n\n\nneurons.parquet\nEach neuron (or segment) in the dataset with an arbitrary set of columns with more information about individual neurons\n\n\nsegment_link.parquet\nAn aggregate edge table that lists the synaptic counts between source and target segments. Additional columns with some statistics about the connection (e.g. avg_scores is the average score value of each individual synaptic link score)\n\n\nsegment_size.parquet\nSize information about a segment such as number of containing supervoxels or total number of voxels\n\n\nsegment_nucleus.parquet\nFor each segment a count of associated number of nuclei. Should only be one in an ideal world with perfect segmentations.\n\n\nsegment_neurotransmitter.parquet\nSummary of most likely neurotransmitter per segment based on filtering of presynaptic locations and their individual neurontransmitter prediction\n\n\nsegment_link_pre.parquet\nNumber of presynaptic locations and downstream partner segments for each segment\n\n\nsegment_link_post.parquet\nNumber of postsynaptic locations and upstream partner segments for each segment\n\n\nlink.parquet/*.parquet\nSame information as in thet synapse_link.parquet file but split into individual parquet files for faster access\n\n\nneurotransmitter.parquet/*.parquet\nThe neurotransmitter predictions for each individual synaptic link\n\n\nnucleus.parquet/*.parquet\nThe location and size of each individual predicted nucleus\n\n\nsynapse_link.parquet\nEach individual predicted synaptic link between a presynaptic and a postsynaptic location with associated scores.\n\n\nskeleton/l2skeletons/skeletons.parquet\nSummary statistics about each exported l2skeleton in the dataset.\n\n\nskeleton/l2skeletons/skeleton_nodes.parquet\nIndividual skeleton nodes for each segment."
  },
  {
    "objectID": "posts/connectome-cloud-analytics/index.html#query-the-data",
    "href": "posts/connectome-cloud-analytics/index.html#query-the-data",
    "title": "Large-Scale Connectome Analytics in the Cloud",
    "section": "Query the Data",
    "text": "Query the Data\nUsing DuckDB, those files can be used remotely as tables in an SQL query. If you want to go into more depth, you can read the DuckDB documentation. Here, we demonstrate a few common queries to get started. In order to improve readability of the query, we store part of the URL in a baseurl variable\n\nimport duckdb\nbaseurl = 'https://api.braincircuits.io/data/fruitfly_fafb_flywire_public'\n\nFirst, we need a DuckDB connection object:\n\ncon = duckdb.connect()\n\nWe can query neurons by a search string easily. If we want to retrieve all neurons which contain BPN string(case-insensitive) in their label column, we use the following query:\n\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/neurons.parquet' \n               WHERE label ILIKE '%BPN%'\n               LIMIT 5\"\"\").df()\ndf\n\n\n\n\n\n\n\n\nsegment_id\nx\ny\nz\nsoma_x\nsoma_y\nsoma_z\nnucleus_id\nsv_id\nflow\n...\nmorphology_group\ntop_nt_conf\ncell_type\nlabel\nsize_um3\nnr_pre\nnr_downstream_partner\nnr_post\nnr_upstream_partner\nnucleus_nr\n\n\n\n\n0\n720575940628278654\n122736\n35863\n4010\n127752\n24256\n3265\n4373018\n79026093046706888\nintrinsic\n...\nSMPpm1_2\n0.844157\n\norphan-BPN-output\n195.360001\n1812\n958\n544\n205\n1\n\n\n1\n720575940630006267\n122528\n36529\n4022\n122384\n28984\n3898\n3574415\n79026161766195332\nintrinsic\n...\nSMPpm1_4\n0.870921\n\nBPN-like neuron\n298.239990\n2913\n1261\n1272\n385\n1\n\n\n2\n720575940627098249\n140000\n23144\n3126\n140000\n23144\n3126\n5577486\n80221468276838352\nintrinsic\n...\nSMPp&v1_posterior_1\n0.795091\nSMPp&v1A_H01\norphan-BPN-output\n1250.310059\n10747\n4063\n6845\n1085\n1\n\n\n3\n720575940618558365\n162592\n77144\n1981\n162592\n77144\n1981\n6912408\n81773222580344887\nintrinsic\n...\n\n0.845792\n\norphan-BPN-output\n1822.030029\n20429\n7895\n13329\n2115\n1\n\n\n4\n720575940628859751\n144022\n38835\n3763\n139624\n28968\n3616\n4944515\n80504042832559736\nintrinsic\n...\nSMPpm1_4\n0.842429\n\nType 1 BPN (Bolt Protocerebral Neuron),(Bidaye...\n236.750000\n2585\n1104\n1348\n350\n1\n\n\n\n\n5 rows × 30 columns\n\n\n\nLet’s retrieve the first 5 neurons that have more than 1000 downstream partners and sort by the number of downstream partners. We can use the following query and retrieve the results directly in a Pandas dataframe:\n\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/neurons.parquet' \n               WHERE nr_downstream_partner &gt; 1000 \n               ORDER BY nr_downstream_partner DESC\n               LIMIT 5\"\"\").df()\ndf\n\n\n\n\n\n\n\n\n\n\n\nsegment_id\nx\ny\nz\nsoma_x\nsoma_y\nsoma_z\nnucleus_id\nsv_id\nflow\n...\nmorphology_group\ntop_nt_conf\ncell_type\nlabel\nsize_um3\nnr_pre\nnr_downstream_partner\nnr_post\nnr_upstream_partner\nnucleus_nr\n\n\n\n\n0\n720575940621280688\n156482\n42275\n3896\n179416\n51040\n3014\n7396453\n81348673921237569\nintrinsic\n...\n\n0.771267\n\nMushroom Body\n11388.240234\n146255\n51620\n113071\n7052\n1\n\n\n1\n720575940615970783\n158906\n64213\n4347\n127904\n49928\n1289\n4492836\n81561292049294153\nintrinsic\n...\n\n0.655521\n\nCT1\n16315.629883\n247006\n49134\n144276\n17505\n1\n\n\n2\n720575940629174889\n107560\n34947\n4823\n83352\n47240\n3701\n1813248\n78040862042737270\nintrinsic\n...\n\n0.795262\n\nAPL-RHS\n11757.730469\n163407\n48184\n125189\n6953\n1\n\n\n3\n720575940621675174\n133999\n56333\n1847\n134280\n51872\n1179\n5058804\n79801523353597754\nintrinsic\n...\n\n0.621499\n\nCT1\n15729.919922\n246711\n47962\n144967\n18119\n1\n\n\n4\n720575940626637002\n121547\n58007\n2243\n144464\n50760\n762\n5741632\n78957235929387973\nintrinsic\n...\n\n0.859750\n\nNone\n6876.879883\n139542\n42196\n67281\n10190\n1\n\n\n\n\n5 rows × 30 columns\n\n\n\nWe see that segment 720575940621280688 has 51620 downstream partners.\nLet’s store this segment id as variable\n\nsegment_id = 720575940621280688\n\nLet’s get all the downstream partners of this segment:\n\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/segment_link.parquet' \n               WHERE src = {segment_id}\n               ORDER BY dst DESC\n               LIMIT 5\"\"\").df()\ndf\n\n\n\n\n\n\n\n\n\n\n\nsrc\ndst\ncount\nmin_scores\nmax_scores\navg_scores\nmin_cleft_scores\nmax_cleft_scores\navg_cleft_scores\n\n\n\n\n0\n720575940621280688\n720575940660053121\n2\n109.382713\n190.875397\n150\n141\n152\n146\n\n\n1\n720575940621280688\n720575940660047489\n43\n7.637001\n742.377136\n192\n1\n178\n114\n\n\n2\n720575940621280688\n720575940659940225\n41\n5.718618\n443.282257\n172\n0\n168\n120\n\n\n3\n720575940621280688\n720575940659850113\n23\n9.563767\n700.225708\n174\n0\n168\n104\n\n\n4\n720575940621280688\n720575940659765121\n31\n9.567139\n1110.103516\n161\n9\n173\n129\n\n\n\n\n\n\n\nAnd we get the list of all downstream segments from the dataframe:\n\ndownstream_segments = df['dst'].tolist()\nprint(downstream_segments[:5])\n\n[720575940660053121, 720575940660047489, 720575940659940225, 720575940659850113, 720575940659765121]\n\n\nLet’s get the L2 skeleton of this segment\n\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/skeleton/l2skeletons/skeleton_nodes.parquet' \n               WHERE segment_id = {segment_id}\"\"\").df()\ndf\n\n\n\n\n\n\n\n\n\n\n\nsegment_id\nx\ny\nz\nnode_id\nparent\n\n\n\n\n0\n720575940621280688\n506832\n182256\n49640\n0\n6\n\n\n1\n720575940621280688\n507232\n181232\n52400\n1\n5\n\n\n2\n720575940621280688\n511488\n155344\n87240\n2\n8\n\n\n3\n720575940621280688\n510192\n173536\n60120\n3\n9\n\n\n4\n720575940621280688\n508864\n175056\n59200\n4\n3\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n11343\n720575940621280688\n720592\n199120\n123600\n11343\n11342\n\n\n11344\n720575940621280688\n721520\n201552\n120360\n11344\n11346\n\n\n11345\n720575940621280688\n724288\n202160\n123520\n11345\n11344\n\n\n11346\n720575940621280688\n724352\n205840\n120680\n11346\n11347\n\n\n11347\n720575940621280688\n720944\n205328\n125480\n11347\n11340\n\n\n\n\n11348 rows × 6 columns\n\n\n\nWe notice that this query is very slow. One option to speed things up is to download the entire skeleton_nodes.parquet file (180MB) and run the query locally:\n!wget -O /tmp/skeleton_nodes.parquet \\\n    https://api.braincircuits.io/data/fruitfly_fafb_flywire_public/skeleton/l2skeletons/skeleton_nodes.parquet \nThe same query now takes only a fraction of a second.\ndf = con.query(f\"\"\"SELECT * \n               FROM '/tmp/skeleton_nodes.parquet' \n               WHERE segment_id = {segment_id}\"\"\").df()\nWe can now also retrieve the presynaptic locations for this segment with the following query:\n\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/synapse_link.parquet' \n               WHERE pre_segment_id = {segment_id}\n               LIMIT 5\"\"\").df()\ndf\n\n\n\n\n\n\n\n\n\n\n\nid\npre_x\npre_y\npre_z\npost_x\npost_y\npost_z\nscores\ncleft_scores\ncleft_id\npre_segment_id\npost_segment_id\n\n\n\n\n0\n21210\n135698\n41219\n1850\n135665\n41212\n1849\n170.457611\n141\n9915144\n720575940621280688\n720575940507977460\n\n\n1\n21211\n135709\n41240\n1849\n135680\n41243\n1849\n326.895081\n147\n9915144\n720575940621280688\n720575940507981812\n\n\n2\n21212\n135719\n41259\n1848\n135723\n41279\n1849\n298.207092\n100\n0\n720575940621280688\n720575940507984372\n\n\n3\n21219\n135709\n41226\n1852\n135683\n41234\n1852\n127.513809\n68\n0\n720575940621280688\n720575940605817522\n\n\n4\n22149\n137649\n41189\n1863\n137652\n41207\n1862\n487.758301\n148\n10150849\n720575940621280688\n720575940472242925\n\n\n\n\n\n\n\nOr the postsynaptic locations:\n\ndf = con.query(f\"\"\"SELECT * \n               FROM '{baseurl}/synapse_link.parquet' \n               WHERE post_segment_id = {segment_id}\n               LIMIT 5\"\"\").df()\ndf\n\n\n\n\n\n\n\n\n\n\n\nid\npre_x\npre_y\npre_z\npost_x\npost_y\npost_z\nscores\ncleft_scores\ncleft_id\npre_segment_id\npost_segment_id\n\n\n\n\n0\n21253\n135822\n41325\n1862\n135843\n41297\n1862\n10.482904\n0\n0\n720575940507992820\n720575940621280688\n\n\n1\n21277\n135924\n41320\n1873\n135938\n41299\n1873\n910.730591\n142\n9915241\n720575940636560730\n720575940621280688\n\n\n2\n21284\n135971\n41583\n1872\n135968\n41552\n1872\n286.582794\n149\n9915238\n720575940649691513\n720575940621280688\n\n\n3\n21297\n135999\n41502\n1873\n135986\n41526\n1873\n117.003525\n83\n0\n720575940636560730\n720575940621280688\n\n\n4\n21344\n136810\n41444\n1849\n136790\n41461\n1849\n45.242020\n92\n0\n720575940629397079\n720575940621280688"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Large-Scale Connectome Analytics in the Cloud\n\n\n\n\n\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2023\n\n\nStephan Gerhard\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]